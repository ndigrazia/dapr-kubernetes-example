kubectl get secret admin-user -n kube-system -ojsonpath='{.data.token}' | base64 --decode

kubectl get pods -A | grep ingress

kubectl -n ingress get configmap

kubectl -n ingress edit configmaps nginx-load-balancer-microk8s-conf

Navigate around the file and add the following section under the kind: ConfigMap line:
data:
  use-forwarded-headers: "true"

kubectl -n ingress logs nginx-ingress-microk8s-controller-8xqzv

kubectl apply -f helloworld.yaml

kubectl get pods -n default

kubectl get services -n default

kubectl delete deployment hello-world-deployment

kubectl get all --selector app=[app-label]

kubectl delete svc [service-name]

kubectl delete rs [replicaset-name]

kubectl delete configmap [configmap-name]

kubectl delete secret [secret-name]

kubectl delete ingress [ingress-name]

kubectl get node -o wide

kubectl apply -f helloworld.yaml


 
microk8s enable ingress metallb

kubectl -n ingress get svc

kubectl apply -f ingress-service.yaml

curl -H "Host: my-local-microk8s.local.com" http://192.168.2.120/hello

curl -H "Host: my-local-microk8s.local.com" http://192.168.2.120/hello/

curl -H "Host: api.myothersite.net" http://<<LOAD BALANCER IP HERE>>/service2/hello
curl -H "Host: api.myothersite.net" http://<<LOAD BALANCER IP HERE>>/service3/hello



kubectl create serviceaccount admin-user -n kube-system
kubectl -n kube-system get sa admin-user -o yaml

kubectl apply -f - <<EOF
apiVersion: v1
kind: Secret
metadata:
  name: admin-user
  namespace: kube-system
  annotations:
    kubernetes.io/service-account.name: admin-user
type: kubernetes.io/service-account-token
EOF

kubectl create clusterrolebinding admin-user --clusterrole cluster-admin --serviceaccount kube-system:admin-user

kubectl get clusterrolebinding admin-user -n kube-system

kubectl get secret admin-user -n kube-system -ojsonpath='{.data.token}' | base64 --decode


kubectl get secret --namespace default redis -o jsonpath="{.data.redis-password}" | base64 -d



docker build -t ndigrazia/dapr-example:1.0.0 node
docker push ndigrazia/dapr-example:1.0.0
kubectl apply -f node.yaml

curl --request POST --data "@sample.json" -H "Host: dapr-local-microk8s.local.com" -H "Content-Type: application/json" http://192.168.2.120/dapr/neworder
curl -H "Host: dapr-local-microk8s.local.com" -H "Content-Type: application/json" http://192.168.2.120/dapr/order


helm repo add dapr https://dapr.github.io/helm-charts/
helm repo update
helm search repo dapr --devel --versions
helm upgrade --install dapr dapr/dapr --version=1.13.4 --namespace dapr-system --create-namespace --wait
helm install dapr-dashboard dapr/dapr-dashboard --namespace dapr-system
helm repo add bitnami https://charts.bitnami.com/bitnami
helm install redis bitnami/redis -n default
helm uninstall dapr --namespace dapr-system

helm repo add kedacore https://kedacore.github.io/charts
helm repo update
helm install keda kedacore/keda  --version 2.12.0 --namespace keda --create-namespace
helm uninstall keda -n keda

watch -n2 "kubectl get pods"


kubectl exec -it <pod-name> top

kubectl top pod --all-namespaces

kubectl get services -n observability

kubectl get pods -n observability

kubectl port-forward -n observability service/prometheus-operated --address 0.0.0.0 9090:9090
kubectl port-forward -n observability service/kube-prom-stack-grafana --address 0.0.0.0 3000:80

Observability has been enabled (user/pass: admin/prom-operator)


curl --request GET -H "Content-Type: application/json" http://localhost:8080/hello

curl --request GET -H "Content-Type: application/json" http://localhost:8080/hello/greeting/nelson


QUARKUS

Using a Dockerfile

 ./mvnw compile quarkus:dev -Dmessage=Hallo

./mvnw clean package
docker build -f src/main/docker/Dockerfile.jvm -t ndigrazia/quarkus-demo:1.0.0 .
docker image ls
docker push ndigrazia/quarkus-demo:1.0.0
docker run --env GREETING_MESSAGE=Hola --env GREETING_SUFFIX=i --rm -d -p 8080:8080 ndigrazia/quarkus-demo:1.0.0
docker run -v $(pwd)/config/application.properties:/deployments/config/application.properties --rm -d -p 8080:8080 ndigrazia/quarkus-demo:1.0.0
kubectl apply -f quarkus/quarkus.yaml

docker exec -ti container_name /bin/bash

curl --request GET -H "Host: quarkus-local-microk8s.local.com" -H "Content-Type: application/json" http://192.168.2.120/quarkus/hello/greeting/nelson

